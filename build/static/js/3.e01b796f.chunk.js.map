{"version":3,"sources":["components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/Quote.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","Quote","param","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.e01b796f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3egWx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2crP2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__30sw4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__35mHz\",\"loading\":\"NewCommentForm_loading__3QiCb\",\"control\":\"NewCommentForm_control__2QgRT\",\"actions\":\"NewCommentForm_actions__VI6Vf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3NEd_\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest, status, error} = useHttp(addComment);\n\n  const {onAddedComment} = props;\n\n  useEffect(() => {\n    if(status === 'completed' && !error){\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({commentData: {text: enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && <div className='centered'><LoadingSpinner/></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from '../comments/CommentsList';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const {quoteId} = useParams();\n\n  const {sendRequest, status, data:loadedComments} = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n    setIsAddingComment(false);\n  },[sendRequest, quoteId]);\n\n  let comments;\n\n  if(status === 'pending'){\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner/>\n      </div>\n    );\n  }\n\n  if(status === 'completed' && (loadedComments && loadedComments.length > 0)){\n    comments = (\n      <CommentsList comments={loadedComments}/>\n    );\n  }\n\n  if(status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n    comments = (\n      <p className='centered'>No comments were added yet!</p>\n    );\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from 'react';\r\nimport {Link, Route, useParams, useRouteMatch} from 'react-router-dom';\r\n\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nconst Quote = () => {\r\n    const param = useParams();\r\n    const match = useRouteMatch();\r\n\r\n    const {quoteId} = param;\r\n\r\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if(status === 'pending'){\r\n        return(\r\n            <div className='centered'>\r\n                <LoadingSpinner/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(error){\r\n        return(\r\n            <p className='centered focused'>{error}</p>\r\n        );\r\n    }\r\n\r\n    if(!loadedQuote.text){\r\n        return (\r\n            <p className='centered'>NO quote found!</p>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author}/>\r\n            <Route path={match.path} exact>\r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={`${match.url}/comment`}>Load Comment</Link>\r\n                </div>\r\n            </Route>\r\n            \r\n            <Route path={`${match.path}/comment`}>\r\n                <Comments/>\r\n            </Route>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Quote;"],"sourceRoot":""}